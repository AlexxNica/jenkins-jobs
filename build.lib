#!/bin/sh
# This shell script library sets variables and supplies functions shared
# between continuous integration build scripts.  It is intended to be
# loaded, e.g.,  by scripts that are run by the Jenkins CI server.  The
# working directory is assumed to be the root of a workspace where the
# website code is checked out into a subdirectory.

# First, define configuration options that may be overridden, e.g.:
# $ APPENGINE_ROOT=/home/ci/google_appengine build-commit.sh

# Commands:
: ${BASE_PYTHON:=python}
: ${DBG_PYTHON:=python2.7-dbg}
: ${MAKE:=make}
: ${VIRTUALENV:=virtualenv}

# Paths:
: ${APPENGINE_ROOT:=/usr/local/google_appengine}
: ${WORKSPACE_ROOT:=.}
: ${WEBSITE_ROOT:=$WORKSPACE_ROOT/webapp}
: ${VIRTUALENV_ROOT:=$WORKSPACE_ROOT/env}
: ${JENKINS_TMPDIR:=$WORKSPACE_ROOT/tmp}
: ${SECRETS_DIR:=$HOME/secrets_py}

# Make all the paths absolute, so clients can chdir with impunity.
# We use the nice side-effect of readlink -f that it absolutizes.
APPENGINE_ROOT=`readlink -f "$APPENGINE_ROOT"`
WEBSITE_ROOT=`readlink -f "$WEBSITE_ROOT"`
VIRTUALENV_ROOT=`readlink -f "$VIRTUALENV_ROOT"`
JENKINS_TMPDIR=`readlink -f "$JENKINS_TMPDIR"`
SECRETS_DIR=`readlink -f "$SECRETS_DIR"`

# Default HipChat info to use for alerting:
: ${HIPCHAT_ROOM:=HipChat Tests}
: ${HIPCHAT_SENDER:=Testybot}


# Sanity check that we're in the right place, the working directory
# above the website source directory.  This is hard to do in general
# -- the make-check-worker workspace, in particular, doesn't look like
# any of the others -- so we try to catch the most common error, that
# we're inside some git repo or another.

if git rev-parse 2>/dev/null; then
    echo "`readlink -f $WORKSPACE_ROOT` is a git repo, not the workspace dir"
    exit 1
fi

# Set up the environment for subprocesses.

mkdir -p "$JENKINS_TMPDIR"
find "$JENKINS_TMPDIR" -mindepth 1 -maxdepth 1 -ctime +5 -print0 \
    | xargs -0 rm -rf                     # keep temp files for 5 days

export TMPDIR="$JENKINS_TMPDIR"
export PATH="$VIRTUALENV_ROOT/bin:$PATH:$APPENGINE_ROOT"

# Set up a virtualenv and enter it.  If already in a virtualenv this
# does nothing.

ensure_virtualenv() {
    if [ -n "$VIRTUAL_ENV" ]; then
        echo "You are already in a virtualenv"
        return 0
    elif [ -d "$VIRTUALENV_ROOT" ]; then
        echo "Virtualenv already exists"
    else
        echo "Creating new virtualenv(s)"
        # We create a "normal" virtualenv we use most of the time, and
        # a "dbg" virtualenv that uses python2.7-dbg and lets us debug
        # running python processes using gdb.
        "$VIRTUALENV" --python="$BASE_PYTHON" "$VIRTUALENV_ROOT".normal
        if `which "$DBG_PYTHON" >/dev/null 2>&1`; then
            "$VIRTUALENV" --python="$DBG_PYTHON" "$VIRTUALENV_ROOT".dbg
            # Need one more fix, as per http://stackoverflow.com/questions/22931774/how-to-use-gdb-python-debugging-extension-inside-virtualenv
            cp -a /usr/lib/debug/usr/bin/python*gdb.py \
                "$VIRTUALENV_ROOT".dbg/bin
        fi
        # Have 'env' point to 'env.normal'.  To debug, you just manually
        # change the symlink to point to env.dbg
        ln -snf "`basename $VIRTUALENV_ROOT`".normal "$VIRTUALENV_ROOT"
        echo <<EOF >"$WORKSPACE_ROOT/README.debugging"
If you want to be able to debug a running python process using gdb
(to debug hangs or segfaults, say), do the following:
    ln -snf env.dbg env
    <run your python process>
    gdb -p <python process id, from 'ps' or similar>
    (gdb) py-bt    # etc
For more information, see https://wiki.python.org/moin/DebuggingWithGdb
EOF
    fi

    . "$VIRTUALENV_ROOT/bin/activate"
}

# Renames $1 to $2 quickly, even if $2 already exists.
# (This is most useful if $2 is a directory.)  It does this by
# registering an at-exit handler, using trap.  (We choose to
# fully delete $2 at exit and not earlier so that the disk
# I/O of deletion doesn't interfere with other tasks we're doing.)
# WARNING: This overwrites other trap handlers, so be careful with it!

DIRS_TO_DELETE=""
trap '[ -z "$DIRS_TO_DELETE" ] || rm -rf $DIRS_TO_DELETE &' 0

fast_mv_f() {
    # Where we put the dest directory before we delete it.  By default
    # it's just <destdir>.to-delete but you can override that with $3.
    tmploc=${3-"$2.to-delete"}
    # This is almost certainly a noop, but needed if you run fast_mv_f
    # twice in succession, or twice in the same script.
    rm -rf "$tmploc"
    if [ -e "$2" ]; then
       mv "$2" "$tmploc"
    fi
    mv "$1" "$2"
    DIRS_TO_DELETE="$DIRS_TO_DELETE $tmploc"
}

# Decrypt secrets.py into a file outside of the Jenkins workspace, we use
# $HOME/secrets_py/ as set up by jenkins/setup.sh in the Khan/aws-config
# project. Then make it importable by setting PYTHONPATH.
# This is idempotent; it's a noop the second and subsequent calls.
decrypt_secrets_py_and_add_to_pythonpath() {
    if echo "$PYTHONPATH" | grep -q "$SECRETS_DIR":; then
      return       # So it's safe to call this twice
    fi
    # Copy the .cast5, which secrets.py uses to do a freshness check.
    cp "$WEBSITE_ROOT"/secrets.py.cast5 "$SECRETS_DIR"
    # The decryption command was copied from the make target "secrets_decrypt"
    # in the webapp project.
    openssl cast5-cbc -d -in "$SECRETS_DIR"/secrets.py.cast5 -out "$SECRETS_DIR"/secrets.py -kfile "$SECRETS_DIR"/secrets.py.cast5.password
    chmod 600 "$SECRETS_DIR"/secrets.py
    export PYTHONPATH="$SECRETS_DIR":$PYTHONPATH
}

# ubuntu defines its own alert by default, that we don't care about.
if type alert >/dev/null; then unalias alert; fi

# Send an alert to hipchat and the logs.  Decrypts secrets if necessary.
# The alertlib subrepo in webapp must be checked out for this to work.
# $1: severity level; $2+: message
alert() {
    severity="$1"
    shift
    decrypt_secrets_py_and_add_to_pythonpath
    if echo "$@" | grep -q '<[^ ].*>'; then    # a hack, but a pretty good one
       html=--html
    else
       html=
    fi
    echo "$@" \
        | ${WEBSITE_ROOT}/third_party/alertlib-khansrc/alert.py \
              --severity="$severity" $html \
              --hipchat "$HIPCHAT_ROOM" --hipchat-sender "$HIPCHAT_SENDER" \
              --logs
}


## Some Git utilities

# Call this from within the repo that you want to do the fetching.
_safe_fetch() {
    timeout 60m git fetch --tags --progress origin
}

# $1: the branch we're in.  We assume this branch also exists on the remote.
_safe_rebase() {
    timeout 10m git rebase "origin/$1" || {
        timeout 10m git rebase --abort
        exit 1
    }
}

# $1: the commit-ish to check out to.
# NOTE: this does a bunch of 'git reset --hard's.  Do not call this
# if you have stuff you want to commit.
_safe_destructive_checkout() {
    timeout 10m git reset --hard
    timeout 10m git checkout "$1"
    timeout 10m git reset --hard
}

# $* (optional): submodules to update.  If left out, update all submodules.
#    If the string 'no_submodules', update no submodules.
# NOTE: This calls 'git clean' so be careful if you expect edits in the repo.
_safe_update_subrepo() {
    if [ "$*" = "no_submodules" ]; then
        return
    fi
    # If we ourselves are a submodule, we don't have any submodules to update.
    if git rev-parse --git-dir | fgrep -q .git/modules; then
        return
    fi

    timeout 10m git submodule sync
    timeout 60m git submodule update --init --recursive -- "$@"

    # Clear out untracked directories left behind when a submodule
    # changes its directory structure.
    timeout 10m git submodule foreach git clean -ffd

    # Clear out untracked directories left behind when a submodule is
    # removed.
    timeout 10m git clean -ffd
}

# checks out the given commit-ish, fetching (or cloning) first.
# The repo is always checked out under $WORKSPACE_ROOT and there
# is no way to specially set the directory name.
# $1: repo to clone
# $2: commit-ish to check out at.  If necessary, does a pull from
#     origin first.
# $3+ (optional): submodules to update to that commit as well.  If
#     left out, update all submodules.  If the string 'no_submodules',
#     update no submodules.
safe_sync_to() {
    repo="$1"
    shift
    commit="$1"
    shift
    (
    dirname="$WORKSPACE_ROOT/`basename "$repo"`"
    if [ -d "$dirname" ]; then
        cd "$dirname"
        _safe_fetch
    else
        cd "$WORKSPACE_ROOT"
        timeout 60m git clone "$repo"
        cd "$dirname"
    fi

    _safe_destructive_checkout "$commit"

    # Merge from origin if need be.
    if timeout 10m git ls-remote --exit-code . origin/"$commit"; then
        _safe_rebase "$commit"
    fi

    _safe_update_subrepo "$@"
    )
}

# $1: directory to run the pull in (can be in a sub-repo)
# $2+ (optional): submodules to pull as well.  If left out, update all
#     submodules.  If the string 'no_submodules', update no submodules.
# NOTE: this does a git reset, and always changes the branch to master!
# It also always inits and updates listed subrepos.
safe_pull() {
    (
    cd "$1"
    shift
    _safe_destructive_checkout "master"
    _safe_fetch
    _safe_rebase "master"
    _safe_update_subrepo "$@"
    )
}

# $1: directory to run the push in (can be in a sub-repo)
# NOTE: you must be checked out at 'master' to call safe_push.
safe_push() {
    (
    cd "$1"
    # In case there have been any changes since the script began, we
    # do 'pull; push'.  On failure, we undo all our work.
    _safe_fetch
    _safe_rebase master || {
        timeout 10m git reset --hard HEAD^
        exit 1
    }
    timeout 60m git push origin master || {
        timeout 10m git reset --hard HEAD^
        exit 1
    }
    )
}

# $1: the directory to commit in (can be in a sub-repo)
# $2+: arguments to 'git commit' (we add '-a' automatically)
# NOTE: This 'git add's all new files in the commit-directory.
safe_commit_and_push() {
    dir="$1"
    shift
    (
    cd "$dir"
    if [ -z "$(git status --porcelain | head -n 1)" ]; then
        echo "No changes, skipping commit"
    else
        timeout 10m git add .
        timeout 10m git commit -a "$@"
    fi
    )
    safe_push "$dir"

    # If dir was a submodule, update the main repo's pointer to the submodule.
    if git -C "$dir" rev-parse --git-dir | fgrep -q .git/modules; then
        timeout 10m git checkout master
        timeout 10m git add "$dir"
        if git commit --dry-run | grep -q -e 'no changes added' -e 'nothing to commit' -e 'nothing added'; then
            echo "No need to update substate for $dir: no new content created"
        else
            timeout 10m git commit -m "$dir substate [auto]"
            safe_push .
        fi
    fi
}
